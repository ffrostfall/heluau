local complex = require(@complex)

-- Constructors
local function f64_array_create(n: number): buffer
   return buffer.create(8 * n)
end

local function f32_array_create(n: number): buffer
   return buffer.create(4 * n)
end

local function c64_array_create(n: number): buffer
   return buffer.create(16 * n)
end

local function c32_array_create(n: number): buffer
   return buffer.create(8 * n)
end

-- Getters
local function f64_read_index(array: buffer, index: number): number
   return buffer.readf64(array, 8 * index)
end

local function f32_read_index(array: buffer, index: number): number
   return buffer.readf32(array, 4 * index)
end

local function c64_read_index(array: buffer, index: number): vector
   return vector.create(
      buffer.readf64(array, 16 * index),
      buffer.readf64(array, 16 * index + 8)
   )
end

local function c32_read_index(array: buffer, index: number): vector
   return vector.create(
      buffer.readf32(array, 8 * index),
      buffer.readf32(array, 8 * index + 4)
   )
end

-- Setters
local function f64_write_index(array: buffer, index: number, value: number): buffer
   return buffer.writef64(array, 8 * index, value)
end

local function f32_write_index(array: buffer, index: number, value: number): buffer
   return buffer.writef32(array, 4 * index, value)
end

local function c64_write_index(array: buffer, index: number, value: vector): buffer
   buffer.writef64(array, 16 * index, vector.x)
   return buffer.write64(array, 16 * index + 8, vector.y)
end

local function c32_write_index(array: buffer, index: number, value: vector): buffer
   buffer.writef32(array, 8 * index, vector.x)
   return buffer.writef32(array, 8 * index + 4, vector.y)
end

--Arithmetic
local function f64_add(array_one: buffer, array_two: buffer): buffer
   local n = buffer.len(array_one) / 8
   local ancilla = f64_array_create(n)
   for index = 0, n - 1 do
      f64_write_index(ancilla,
		      index,
		      f64_read_index(array_one, index) +
		      f64_read_index(array_two, index)
      )
   end
   return ancilla
end

local function f32_add(array_one: buffer, array_two: buffer): buffer
   local n = buffer.len(array_one) / 4
   local ancilla = f32_array_create(n)
   for index = 0, n - 1 do
      f32_write_index(ancilla,
		      index,
		      f32_read_index(array_one, index) +
		      f32_read_index(array_two, index)
      )
   end
   return ancilla
end

local function c64_add(array_one: buffer, array_two: buffer): buffer
   local n = buffer.len(array_one) / 16
   local ancilla = c64_array_create(n)
   for index = 0, n - 1 do
      c64_write_index(ancilla,
		      index,
		      c64_read_index(array_one, index) +
		      c64_read_index(array_two, index)
      )
   end
   return ancilla
end

local function c32_add(array_one: buffer, array_two: buffer): buffer
   local n = buffer.len(array_one) / 8
   local ancilla = c32_array_create(n)
   for index = 0, n - 1 do
      c32_write_index(ancilla,
		      index,
		      c32_read_index(array_one, index) +
		      c32_read_index(array_two, index)
      )
   end
   return ancilla
end

local function f64_sub(array_one: buffer, array_two: buffer): buffer
   local n = buffer.len(array_one) / 8
   local ancilla = f64_array_create(n)
   for index = 0, n - 1 do
      f64_write_index(ancilla,
		      index,
		      f64_read_index(array_one, index) -
		      f64_read_index(array_two, index)
      )
   end
   return ancilla
end

local function f32_sub(array_one: buffer, array_two: buffer): buffer
   local n = buffer.len(array_one) / 4
   local ancilla = f32_array_create(n)
   for index = 0, n - 1 do
      f32_write_index(ancilla,
		      index,
		      f32_read_index(array_one, index) -
		      f32_read_index(array_two, index)
      )
   end
   return ancilla
end

local function c64_sub(array_one: buffer, array_two: buffer): buffer
   local n = buffer.len(array_one) / 16
   local ancilla = c64_array_create(n)
   for index = 0, n - 1 do
      c64_write_index(ancilla,
		      index,
		      c64_read_index(array_one, index) -
		      c64_read_index(array_two, index)
      )
   end
   return ancilla
end

local function c32_sub(array_one: buffer, array_two: buffer): buffer
   local n = buffer.len(array_one) / 8
   local ancilla = c32_array_create(n)
   for index = 0, n - 1 do
      c32_write_index(ancilla,
		      index,
		      c32_read_index(array_one, index) -
		      c32_read_index(array_two, index)
      )
   end
   return ancilla
end

local function f64_hadamard(array_one: buffer, array_two: buffer): buffer
   local n = buffer.len(array_one) / 8
   local ancilla = f64_array_create(n)
   for index = 0, n - 1 do
      f64_write_index(ancilla,
		      index,
		      f64_read_index(array_one, index) *
		      f64_read_index(array_two, index)
      )
   end
   return ancilla
end

local function f32_hadamard(array_one: buffer, array_two: buffer): buffer
   local n = buffer.len(array_one) / 4
   local ancilla = f32_array_create(n)
   for index = 0, n - 1 do
      f32_write_index(ancilla,
		      index,
		      f32_read_index(array_one, index) *
		      f32_read_index(array_two, index)
      )
   end
   return ancilla
end

local function c64_hadamard(array_one: buffer, array_two: buffer): buffer
   local n = buffer.len(array_one) / 16
   local ancilla = c64_array_create(n)
   for index = 0, n - 1 do
      c64_write_index(ancilla,
		      index,
		      complex.multiply(c64_read_index(array_one, index),
				       c64_read_index(array_two, index)
		      )
      )
   end
   return ancilla
end

local function c32_hadamard(array_one: buffer, array_two: buffer): buffer
   local n = buffer.len(array_one) / 8
   local ancilla = c32_array_create(n)
   for index = 0, n - 1 do
      c32_write_index(ancilla,
		      index,
		      complex.multiply(c32_read_index(array_one, index),
				       c32_read_index(array_two, index)
		      )
      )
   end
   return ancilla
end

--Functions and Arrays
local function f64_map_function(f: number -> number, f64_array: buffer): buffer
